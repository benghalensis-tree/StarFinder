<div class="wrapper">
    <%= render 'side_menu' %>
    <div id="content">
        <div class="masthead_2 d-flex align-items-center"  >
            <div class="container px-4 px-lg-2 text-center">
                <div class="row">
                        
                    <div id="sidebarCollapse" class="col-1 btn btn-dark border border-2 border-primary rounded-3 active">    
                        <h4 class='text-light'><%= @day %></h4>
                        <%= image_tag(asset_path("moon_icons/#{@moon_age}.png"), style: 'width: 30px;') %>
                    </div>

                    <div class="col-3">
                        <%= render 'search', q: @q, url: posts_path %>
                   <div class='row'>
                        <button id="light_pollutions_btn" class='col btn btn-outline-danger border border-primary rounded'><i class="fa-solid fa-fire" style="color: #ff0000;"></i></button>
                        <button id="weather_forecasts_btn" class='col btn btn-outline-warning border border-primary rounded'><i class="fa-solid fa-cloud-sun" style="color: #ffc23d;"></i></button>
                        <button id="star_light_btn" class='col btn btn-outline-info border border-primary rounded'><i class="fa-solid fa-star" style="color: #7cccfd;"></i></button>
                    </div>
                    </div>
                </div>
            </div>
        </div>
        <div id='map'></div>
    </div>
</div>

<style>
#map {
  position: absolute;
  height: 100%;
  width: 100%;
}
</style>

<script>
  let map;
  let markers = [];
  let markers_sl = []
  let markers_wf = []
  let infoWindow = []; 
  let posts = gon.posts; 
  let star_lights = gon.star_lights;
  let weather_forecasts = gon.weather_forecasts;
  let kmlLayer;

  function initMap() {
    geocoder = new google.maps.Geocoder()

    map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: 35.6585, lng: 139.7486 }, 
      zoom: 5,
      mapId: "<%=ENV['MAP_ID']%>",
      scrollwheel: true,
      mapTypeControl: false, 
      restriction: {
        latLngBounds: {
          north: 49.55, 
          south: 20.25, 
          west: 122.935, 
          east: 153.986
        },
        strictBounds: false
      }
    });

    kmlLayer = new google.maps.KmlLayer({
      url: "<%=ENV['KML_LIGHT_POLLUTION_URL']%>",
        map: map
    });

    kmlLayer.setMap(null);

    if(weather_forecasts){

    for (var i = 0; i < weather_forecasts.length; i++) {
      let id = weather_forecasts[i]['id']

      markerLatLng = new google.maps.LatLng({
        lat: weather_forecasts[i]['latitude'],
        lng: weather_forecasts[i]['longitude']
      });

      let weather_icon
      if (weather_forecasts[i]['icon'] == '01d' ){
        weather_icon = '<%= asset_path 'weather_icons3/01d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '02d' ){
        weather_icon = '<%= asset_path 'weather_icons3/02d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '03d' ){
        weather_icon = '<%= asset_path 'weather_icons3/03d04d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '04d' ){
        weather_icon = '<%= asset_path 'weather_icons3/03d04d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '09d' ){
        weather_icon = '<%= asset_path 'weather_icons3/09d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '10d' ){
        weather_icon = '<%= asset_path 'weather_icons3/10d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '11d' ){
        weather_icon = '<%= asset_path 'weather_icons3/11d.png' %>'
        }
      else if (weather_forecasts[i]['icon'] == '13d' ){
        weather_icon = '<%= asset_path 'weather_icons3/13d.png' %>'
        }
      else {
        weather_icon = '<%= asset_path 'weather_icons3/01d.png' %>'
        }
      
      markers_wf[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map,
        visible: false,
        icon: {
          url: weather_icon,
          scaledSize: new google.maps.Size(40, 40),
          }
      });
      weather_content_data = `<div style="width:200px; height:200px;">
                        
                          <img src="${ weather_icon }" width="100%" />
                        </a>
                        <p style="font-size:10px;">曇り度合い:${ weather_forecasts[i]['clouds']}</p>
                        <p style="font-size:10px;">湿度:${ weather_forecasts[i]['humidity']}</p>
                        <p style="font-size:10px;">降水:${ weather_forecasts[i]['pop']}</p>
                        <p style="font-size:10px;">最高気温:${ weather_forecasts[i]['temp_max']}</p>
                        <p style="font-size:10px;">最低気温:${ weather_forecasts[i]['temp_min']}</p>
                      </div>`

      infoWindow[i] = new google.maps.InfoWindow({
        content: weather_content_data,
        maxWidth: 600
      });
      weather_infoOpen(i);
      weather_infoClose(i);
    }  
    }

    for (var i = 0; i < star_lights.length; i++) {
      let id = star_lights[i]['id']

      markerLatLng = new google.maps.LatLng({
        lat: star_lights[i]['latitude'],
        lng: star_lights[i]['longitude']
      });

      markers_sl[i] = new google.maps.Marker({
        position: markerLatLng,
        map: map,
        visible: false,
        icon: {
          url:  `/assets/magnitude_icons/icon_${star_lights[i]['rank']}.png`,
          scaledSize: new google.maps.Size(20, 20),
          }
      });
      star_light_content_data = `<div style="width:200px; height:200px;">
                          <a data-turbolinks = "false" href="${ star_lights[i]['star_light_url'] }">
                            <img src="/assets/magnitude_icons/icon_${star_lights[i]['rank']}.png" style="width: 100px; display: block; margin-left: auto;margin-right: auto;" />
                          </a>
                          <p style="font-size:20px;">星ランク${ star_lights[i]['rank']}</p>
                          <p style="font-size:15px;">(等級${ star_lights[i]['magnitude']})</p>
                      </div>`

      infoWindow[markers_wf.length + i] = new google.maps.InfoWindow({
        content: star_light_content_data,
        maxWidth: 600
      });
      star_light_infoOpen(i);
      star_light_infoClose(i);
    }  
    
    for (var i = 0; i < posts.length; i++) {
      let id = posts[i]['id']

      markerLatLng = new google.maps.LatLng({
        lat: posts[i]['latitude'],
        lng: posts[i]['longitude']
      });

      markers[i] = new google.maps.marker.AdvancedMarkerView({
        position: markerLatLng,
        map: map,
        collisionBehavior: 'OPTIONAL_AND_HIDES_LOWER_PRIORITY',
      });
      
      if( posts[i]['image_url']){
        info_window_image = posts[i]['image_url']
      }
      else{
        info_window_image = '<%= asset_path 'no-image.png' %>'
      }

      content_data = `<div style="width:200px; height:200px;">
                        <a data-turbolinks = "false" href="${ posts[i]['post_url'] }">
                          <img src="${ info_window_image }" width="100%" />
                        </a>
                        <p style="font-size:20px;">${ posts[i]['title']}</p>
                        <p style="font-size:10px;">閲覧数:${ posts[i]['view_count']}</p>
                        <p style="font-size:10px;">${ posts[i]['content']}</p>
                      </div>`

      infoWindow[markers_sl.length + markers_wf.length + i] = new google.maps.InfoWindow({
        content: content_data,
        maxWidth: 600
      });

      infoOpen(i);
      infoClose(i);
    }
    new markerClusterer.MarkerClusterer({
        map,
        markers
    });
    document.getElementById('light_pollutions_btn').addEventListener('click', function() {
        if (kmlLayer.getMap()) {
            kmlLayer.setMap(null);
        } else {
            kmlLayer.setMap(map);
        }
    });
    document.getElementById('weather_forecasts_btn').addEventListener('click', toggleWeatherForecasts);
    document.getElementById('star_light_btn').addEventListener('click', toggleStarLights);
  }

  function infoOpen(i) {
    markers[i].addListener('click', function () {
      for (var j = 0; j < infoWindow.length; j++) {
      if (j !== i) {
        infoWindow[j].close();
      }
    }
      infoWindow[markers_sl.length + markers_wf.length + i].open(map, markers[i]);
    });
  }
  function infoClose(i) {
    map.addListener('click', function () {
      infoWindow[markers_sl.length + markers_wf.length + i].close(map, markers[i]);
    });
  }

  function weather_infoOpen(i) {
    markers_wf[i].addListener('click', function () {
      for (var j = 0; j < infoWindow.length; j++) {
      if (j !== i) {
        infoWindow[j].close();
      }
    }
      infoWindow[i].open(map, markers_wf[i]);
    });
  }
  function weather_infoClose(i) {
    map.addListener('click', function () {
      infoWindow[i].close(map, markers_wf[i]);
    });
  }

  function star_light_infoOpen(i) {
    markers_sl[i].addListener('click', function () {
      for (var j = 0; j < infoWindow.length; j++) {
      if (j !== i) {
        infoWindow[j].close();
      }
    }
      infoWindow[markers_wf.length + i].open(map, markers_sl[i]);
    });
  }
  function star_light_infoClose(i) {
    map.addListener('click', function () {
      infoWindow[markers_wf.length + i].close(map, markers_sl[i]);
    });
  }

  function toggleWeatherForecasts() {
    let currentVisibility = markers_wf[0] && markers_wf[0].getVisible();
    let newVisibility = !currentVisibility;
    for (let marker of markers_wf) {
        marker.setVisible(newVisibility);
    }
  }

  function toggleStarLights() {
    let currentVisibility = markers_sl[0] && markers_sl[0].getVisible();
    let newVisibility = !currentVisibility;
    for (let marker of markers_sl) {
        marker.setVisible(newVisibility);
    }
  }

</script>
